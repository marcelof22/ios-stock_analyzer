#!/bin/bash
#
# Name: tradelog.sh
# 
# Purpose: This script performs tradelog filtering differing in input.
# 
# Author: Marcel Feiler
# 
# Date: 05.04.2021

export POSIXLY_CORRECT=yes
export LC_NUMERIC=en_US.UTF-8

#FUNCTIONS --------------------------------------------------------
help_com() {
	echo "Napoveda: tradelog [-h|--help]"
	echo "Povolena postupnost argumentov: tradelog [FILTER...] [PRIKAZY] [LOG..[LOG1...]]"
    awidth=$(tput cols)
	printf "%${awidth}s" " " | tr " " "-"
	echo ""
	echo "Prikazy: (jeden z)"
	echo "list-tick – výpis seznamu vyskytujících se burzovních symbolů, tzv. “tickerů”"
	echo "profit – výpis celkového zisku z uzavřených pozic"
	echo "pos – výpis hodnot aktuálně držených pozic seřazených sestupně dle hodnoty"
	echo "last-price – výpis poslední známé ceny pro každý ticker"
	echo "hist-ord – výpis histogramu počtu transakcí dle tickeru"
	echo "graph-pos – výpis grafu hodnot držených pozic dle tickeru"
	printf "%${awidth}s" " " | tr " " "-"
	echo "Filter: (kombinacia)"
	echo "-a DATETIME – after: jsou uvažovány pouze záznamy PO tomto datu (bez tohoto data). DATETIME je formátu YYYY-MM-DD HH:MM:SS"
	echo "-b DATETIME – before: jsou uvažovány pouze záznamy PŘED tímto datem (bez tohoto data)"
	echo "-t TICKER – jsou uvažovány pouze záznamy odpovídající danému tickeru. Při více výskytech přepínače se bere množina všech uvedených tickerů"
	echo "-w WIDTH – u výpisu grafů nastavuje jejich šířku, tedy délku nejdelšího řádku na WIDTH. Tedy, WIDTH musí být kladné celé číslo. Více výskytů přepínače je chybné spuštění"
}
#-----------------------------------------------------------------

###################Variables##############
file="${@: -1}"
argument=""
prikaz=()
filter=()
pole=()
log_file=""
gz_log=""
n_arg="$#"
n_prikaz=0
filters=()
n_filters=0
n_tickers=0
arr_tick=()
adate=""
bdate=""
h_width=1
g_width=1000
n_com=0
n_width=0
##############################################
#	LOADING ARGUMENTS TO VARIABLE			 #
##############################################

while [ "$#" -gt 0 ]; do
	case "$1" in

		list-tick | pos | profit | last-price | hist-ord | graph-pos)
			n_prikaz=$(( n_prikaz + 1 ))
			if [ "$n_prikaz" -gt 1 ]; then
				echo "ERROR: Argument of type COMMAND can have just one occurence"
				exit 1
			fi	
			argument="$1"
			shift
			prikaz+=($argument)
            n_com=$(( n_com+1 ))
			;;
		-h | --help)
			help_com
			exit 0
			;;
		-w)
			filter="$1"	
			width="$2"
            n_width=$(( n_width+1 ))
            if ! [[ "$width" =~ ^[0-9]+$ ]] || [ $width -le 0 ]; then
                echo "Argument width is negative or is not integer"
                exit 1
            fi
			shift
			shift
            h_width=$width
            g_width=$width
            filters+=($filter)
            filters+=($width)
            n_filters=$(( n_filters+2 ))
			;;
		-t)
			filter="$1"	
			ticker="$2"
			shift
			shift
            arr_tick+=($ticker)
            filters+=($filter)
            filters+=($ticker)
            n_filters=$(( n_filters+3 ))
            n_tickers=$(( n_tickers+1 ))
			;;
		-b)
		    filter="$1"				
            bdate="$2"
	    
            if ! [[ "$bdate" =~ ^[0-9]{4}-[0-1]{1}[0-9]{1}-[0-3]{1}[0-9]{1}[[:space:]][0-2]{1}[0-9]{1}:[0-5]{1}[0-9]{1}:[0-5]{1}[0-9]{1}$ ]]; then #
                echo "Time format in -b is incorrect, should be YYYY-MM-DD HH:MM:SS"
                exit 1                             
            fi
        
            
			shift
			shift
			
            filters+=($filter)
            filters+=($byear)
            filters+=($bhour)
            n_filters=$(( n_filters+3 ))
			;;
		-a)
			filter="$1"	
			adate="$2"
			
			
           
            if ! [[ "$adate" =~ ^[0-9]{4}-[0-1]{1}[0-9]{1}-[0-3]{1}[0-9]{1}[[:space:]][0-2]{1}[0-9]{1}:[0-5]{1}[0-9]{1}:[0-5]{1}[0-9]{1}$ ]]; then
                echo "Time format in -a is incorrect, should be YYYY-MM-DD HH:MM:SS"
                exit 1
                 
                
            fi

			shift
			shift
			
            filters+=($filter)
            filters+=($ayear)
            filters+=($ahour)
            n_filters=$(( n_filters+3 ))
			;;
		*)
			argument="$1"
			if [ ${argument:(-3)} = ".gz" ]; then #ends with .gz
				gz_file="$1 $gz_file"			
                
                


				shift
			elif [ ${argument:(-3)} = "log" ]; then	  #ends with .log
				log_file="$1 $log_file"							#name of log
				shift
			else
                echo "Argument is incorrect, try again"
                exit 1
                
			
				
							
			fi
			;;

	esac

done



#########################END OF LOADING ARGUMENTS TO VARIABLES AND ARRAYS###############################

#----------------------------------
#COMMAND     FILTER
#----------------------------------
#FILTER VARIABLES
#--------------
j=0
i=0
opakovanie=0
output=1
n_trans=0
tmp=$log_file
counter=0
max_length=0
max=""
#---------------



if [ -n "$log_file" ] && [ -n "$gz_file" ]; then
    input=$(gzip -d -c $gz_file; cat $log_file)

    elif [ -z "$log_file" ] && [ -z "$gz_file" ]; then
        input=$(cat -)

    elif [ -z "$log_file" ] && [ -n "$gz_file" ]; then
        input=$(gzip -d -c $gz_file)    
    
    elif [ -n "$log_file" ] && [ -z "$gz_file" ]; then
        input=$(cat $log_file)


fi    



if [ $n_arg -eq 0 ] && [ -n "$input" ]; then
	
	echo "$input"
	exit 0

elif [ $n_arg -eq 0 ]; then
		
    echo "$input"
	exit 0
fi




#####LOOP FOR FILTERS#####

    if [ $n_tickers -gt 0 ]; then
       
        if [ "$adate" != "" ] && [ "$bdate" != "" ]; then
            tmp=$(echo "$input" | awk -F'[;]' -v arr="${arr_tick[*]}" -v bdate="$bdate" -v adate="$adate" -v n_tickers=$n_tickers '{
                split(arr,arr_tick," ");
            
                for (i = 1; i <= n_tickers; i++) {
                    if (arr_tick[i] == $2 && $1 > adate && $1 < bdate) {
                        print $0;
                    }    

                    
                }        
    
            }')

        elif [ "$adate" != "" ] && [ "$bdate" == "" ]; then
            tmp=$(echo "$input" | awk -F'[;]' -v arr="${arr_tick[*]}" -v bdate="$bdate" -v adate="$adate" -v n_tickers=$n_tickers '{
                split(arr,arr_tick," ");

                for (i = 1; i <= n_tickers; i++) {
                    if (arr_tick[i] == $2 && $1 > adate) {
                        print $0;
                    }
                }

            }')
        
        elif [ "$adate" == "" ] && [ "$bdate" != "" ]; then
            tmp=$(echo "$input" | awk -F'[;]' -v arr="${arr_tick[*]}" -v bdate="$bdate" -v adate="$adate" -v n_tickers=$n_tickers '{
                split(arr,arr_tick," ");
            
                for (i = 1; i <= n_tickers; i++) {
                    if (arr_tick[i] == $2 && $1 < bdate) {
                        print $0;                      
                    }    
 
                     
                }
            }')

        elif [ "$adate" == "" ] && [ "$bdate" == "" ]; then
            tmp=$(echo "$input" | awk -F'[;]' -v arr="${arr_tick[*]}" -v bdate="$bdate" -v adate="$adate" -v n_tickers=$n_tickers '{
                split(arr,arr_tick," ");
            
                for (i = 1; i <= n_tickers; i++) {
                    if (arr_tick[i] == $2) {
                        print $0;                      
                    }    
  
                      
                }
            }')

        
        fi


    fi    


    if [ $n_tickers -eq 0 ]; then
        tmp=$(echo "$input" | awk -F'[;]' -v bdate="$bdate" -v adate="$adate" '{
            if (bdate != "" && adate != "" ) {
                if ($1 > adate && $1 < bdate) {
                    print $0;
                }    
            }    

            if (bdate != "" && adate == "" ) {
                if ($1 < bdate) {
                    print $0;
                }    
            }   

            if (bdate == "" && adate != "" ) {
                if ($1 > adate) {
                    print $0;
                }    
            }

            if (bdate == "" && adate == "" ) {
                print $0;  
            }
            
    
    
    }')

    fi

							

#####END OF FILTERS#####





#####LOOP FOR COMMAND#####

    

    if [ $n_com -eq 0 ]; then
        echo "$tmp"
    fi

	while [ $j -le $n_arg ]; do

	#####################LIST-TICK####################################################		

		if [ "${prikaz[j]}" = "list-tick" ]; then #LIST-TICK DONE
			
		    echo "$tmp" | awk -F'[;]' '{ if (a[$2]++ == 0) {print $2|"$2 sort -n"}}'
		fi

	#####################PROFIT#######################################################

		if [ "${prikaz[j]}" = "profit" ]; then #PROFIT DONE
			
			echo "$tmp" | awk -F'[;]' '{
			if($3 == "sell") {
				sell += $4 * $6;
				
			}	

			if($3 == "buy") {
				buy += $4 * $6;
				
			}

			} END {printf "%.2f\n", sell - buy;}'
					
		fi

	#######################GRAPH-POS##################################################

        if [ "${prikaz[j]}" = "graph-pos" ]; then
            tmp_gpos=$(echo "$tmp" | awk -F'[;]' '{print $2";"$0}' | sort)
           
            max_pos=$(echo "$tmp_gpos" | awk -F'[;]' -v counter=$counter -v max_length=$maxlength '{
                 
                
                if (counter == 0) {
                    prev_tick = $1;            
                } 

                if (prev_tick == $1) {
                    if ($4 == "sell") {
                        sell_volume += $7;
                        }

                    if ($4 == "buy") {
                        buy_volume += $7;
                    }   

                    unit_price = $5;                    
               }   
                 
                if (prev_tick != $1) {
                    held_units= buy_volume - sell_volume;
                    pos= held_units * unit_price;                                                                             
                    prev_tick = $1;
                    pos_u= pos;

                    if (pos_u < 0) {
                        pos_u= pos - pos - pos;
                    }    

                    if ( max_length <= pos_u ) {
                        max_length = pos_u;
                    }
                    sell_volume = 0;
                    buy_volume = 0;
                    pos= 0;
                    unit_price= 0;
                    

                    if (prev_tick == $1) {
                        if ($4 == "sell") {
                            sell_volume += $7;
                        }

                        if ($4 == "buy") {
                            buy_volume += $7;
                        }

                        unit_price = $5;
                        
                    }
                }   
 
                counter++;
 
            } END {held_units= buy_volume - sell_volume; pos= held_units * unit_price; pos_u = pos; if (pos_u < 0){pos_u= pos - pos - pos} if ( max_length <= pos_u ) {max_length = pos_u} printf "%.2f", max_length;}') 
            #ak je maximum zaporne vypise sa nam kladne
            
            

            
            gr_pos=$(echo "$tmp_gpos" | awk -F'[;]' -v counter=$counter '{
                 
                if (counter == 0) {
                    prev_tick = $1;
            
                } 

                if (prev_tick == $1) {
                    if ($4 == "sell") {
                        sell_volume += $7;
                    }

                    if ($4 == "buy") {
                        buy_volume += $7;
                    }   
                    
                    unit_price = $5;                   
               }   
                 
                if (prev_tick != $1) {
                    held_units= buy_volume - sell_volume;
                    pos= held_units * unit_price;                                        
                    printf prev_tick":" "%.2f", pos;
                    print "";
                    prev_tick = $1;
                    sell_volume = 0;
                    buy_volume = 0;
                    pos= 0;
                    unit_price= 0;
        
                    if (prev_tick == $1) {
                        if ($4 == "sell") {
                            sell_volume += $7;
                        }

                        if ($4 == "buy") {
                            buy_volume += $7;
                        }

                        unit_price = $5;
                        
                        }
                    }

                counter++;

            } END {held_units= buy_volume - sell_volume; pos= held_units * unit_price; printf prev_tick":" "%.2f", pos;}')  
                
    
            

             
            
            overall_gr_pos=$(echo "$gr_pos" | awk -F'[:]' -v g_width=$g_width -v max_pos=$max_pos '{
                  
                pos = $2;
                act_pos= $2;

                if (g_width != 1000) {
                unit = max_pos / g_width;
                }

                else {
                    unit = 1000;
                }

                
                printf ("%-10s:", $1);
                if ($2<0) {
                    act_pos = pos - pos - pos;
                    
                }

                num_parts = act_pos / unit;
                
                if (num_parts < 1) {
                    printf("\n");
                }    

                else {
                
                    if (pos < 0) {
                        printf (" ");
                        for (i=1; i< int (num_parts); i++) {
                            printf "!";
                        }    
                        printf "!";

                    }

                    else if (pos > 0) {
                        printf(" ");
                        for (i=1; i<int (num_parts); i++) {
                            printf "#";
                        }    
                        printf "#";
                
                    }    
                    printf ("\n");
                }

               


            }')
    

            echo "$overall_gr_pos"


        fi    

		######################################POS#######################################

		if [ "${prikaz[j]}" = "pos" ]; then						             								           
            tmp_pos=$(echo "$tmp" | awk -F'[;]' '{print $2";"$0}' | sort)

			#premenne:  prev_tick held_units unit_price sell_volume buy_volume
                                                                               
            pos=$(echo "$tmp_pos" | awk -F'[;]' -v counter=$counter '{
                
                if (counter == 0) {
                    prev_tick = $1;
            
                } 

                if (prev_tick == $1) {
                    if ($4 == "sell") {
                        sell_volume += $7;
                    }

                    if ($4 == "buy") {
                        buy_volume += $7;
                    }   
                    
                    unit_price = $5;
                   
               }   
                
                if (prev_tick != $1) {
                    held_units= buy_volume - sell_volume;
                    pos= held_units * unit_price;                                        
                    printf prev_tick":" "%.2f", pos;
                    print "";
                    prev_tick = $1;
                    sell_volume = 0;
                    buy_volume = 0;
                    pos= 0;
                    unit_price= 0;
        
                    if (prev_tick == $1) {
                        if ($4 == "sell") {
                            sell_volume += $7;
                        }

                        if ($4 == "buy") {
                            buy_volume += $7;
                        }

                        unit_price = $5;
                        
                        }
                    }

                counter++;

            } END {held_units= buy_volume - sell_volume; pos= held_units * unit_price; printf prev_tick":" "%.2f", pos;}')


            pre_pos=$(echo "$pos" | awk -F'[:]' -v max="" '{
                if (length(max) < length($2)) {
                    max = $2;
                    
                }   
            
            } END {print length(max)}')
            
           
            
            echo "$pos" | awk -F'[:]' -v pre_pos=$pre_pos '{
                printf ("%-10s:%*.2f\n", $1,pre_pos+1,$2);  # za * dosadzam konstantu odsadenia  
                 
                
            }' | sort -t ":" -k 2,2 -r -n

        fi

		##############################LAST-PRICE##############################################

        if [ "${prikaz[j]}" = "last-price" ]; then

            
        
		    tmp_lp=$(echo "$tmp" | awk -F'[;]' '{print $2";"$0}' | sort)
            
            lp=$(echo "$tmp_lp" | awk -F'[;]' -v counter=$counter '{

                if (counter == 0) {
                    prev_tick = $1;

                }

                if (prev_tick == $1) {
                    unit_price = $5;
                    }

                if (prev_tick != $1) {                                                                               
                    printf prev_tick":" "%.2f", unit_price;
                    printf("\n");
                    prev_tick = $1;                                                           
                    unit_price= 0;

                    if (prev_tick == $1) {
                        unit_price = $5;
                    }
                }

                counter++;

            } END {printf prev_tick":" "%.2f", unit_price;}')

            max_lp=$(echo "$lp" | awk -F'[:]' -v max="" '{
                if (length(max) < length($2)) {
                    max = $2;
                     
                }   
             
            } END {print length(max)}')

            

            overall_lp=$( echo "$lp" | awk -F'[:]' -v max_lp=$max_lp '{
                printf ("%-10s:%*.2f\n", $1,max_lp+1,$2);

            }')

            echo "$overall_lp"

          
        fi

		#################################HISTO-ORD############################################

        if [ "${prikaz[j]}" = "hist-ord" ]; then
            
            tmp_ho=$(echo "$tmp" | awk -F'[;]' '{print $2";"$0}' | sort)

            
         
            max_ho=$(echo "$tmp_ho" | awk -F'[;]' -v counter=0 -v n_trans=0 -v h_width=$h_width -v max_trans=0 '{
                if (counter == 0) {
                    prev_tick = $1;            
                }

                if (prev_tick == $1) {
                    n_trans ++;
                    last_trans = n_trans;
                }    

                if (prev_tick != $1) {
                    
                    
                    prev_tick = $1;
                    
                    if (n_trans > max_trans) {
                        max_trans = n_trans;
                    }    
            
                    n_trans = 0;
                   
                   

                    if (prev_tick == $1) {
                        
                        n_trans ++;
                        
                    }

                    

                 } 



                counter++;

            } END {if (n_trans > max_trans){max_trans = n_trans}print max_trans;}')
            
                      

            ho=$(echo "$tmp_ho" | awk -F'[;]' -v max_ho=$max_ho -v counter=0 -v n_trans=0 -v h_width=$h_width '{
                
                if (h_width != 1) {
                unit = max_ho / h_width;
                }

                else {
                    unit = 1;
                }
                

                if (counter == 0) {
                    prev_tick = $1;
                }    

                if (prev_tick == $1) {
                    n_trans++;
                    last_trans = n_trans;
                    
                }    

                if (prev_tick != $1) {
                    num_parts = n_trans / unit;
                    
                    if (num_parts < 1) {
                        
                        printf ("%-10s:", prev_tick);
                        
                    }

                    else {
                        printf ("%-10s:", prev_tick);
                        printf " ";
                        for (i=1; i < int (num_parts); i++) {
                            printf "#";
                        }    
                        printf "#";
                    }    
                    
                    printf ("\n");
                    n_trans = 0;
                    prev_tick = $1;
                    n_trans++;
                    
                }    

                counter++;


        } END {num_parts = n_trans / unit; if (num_parts < 1) {printf ("%-10s:", prev_tick);} else {printf ("%-10s:", prev_tick); printf " "; for (i=1; i < int (num_parts); i++){printf "#"}printf "#";} printf ("\n")}')

        echo "$ho"


        fi    



        j=$(( j + 1 ));

	done
			





exit 0


####################END OF SCRIPT#########################
